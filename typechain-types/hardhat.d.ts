/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AfEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AfEth__factory>;
    getContractFactory(
      name: "IClaimZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimZap__factory>;
    getContractFactory(
      name: "ILockedCvx",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILockedCvx__factory>;
    getContractFactory(
      name: "IAfBundle1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAfBundle1155__factory>;
    getContractFactory(
      name: "IAfCVX1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAfCVX1155__factory>;
    getContractFactory(
      name: "AsymmetryStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsymmetryStrategy__factory>;
    getContractFactory(
      name: "ICvxLockerV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICvxLockerV2__factory>;
    getContractFactory(
      name: "ILockedCvx",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILockedCvx__factory>;
    getContractFactory(
      name: "IAfBundle1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAfBundle1155__factory>;
    getContractFactory(
      name: "IAfCVX1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAfCVX1155__factory>;
    getContractFactory(
      name: "AnkrEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnkrEth__factory>;
    getContractFactory(
      name: "AnkrStaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnkrStaker__factory>;
    getContractFactory(
      name: "ICrvEthPool1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrvEthPool1__factory>;
    getContractFactory(
      name: "ICrvEthPool2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrvEthPool2__factory>;
    getContractFactory(
      name: "IFrxETHMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFrxETHMinter__factory>;
    getContractFactory(
      name: "IsFrxEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsFrxEth__factory>;
    getContractFactory(
      name: "IDerivative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDerivative__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IStETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStETH__factory>;
    getContractFactory(
      name: "IWStETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWStETH__factory>;
    getContractFactory(
      name: "RocketDAOProtocolSettingsDepositInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RocketDAOProtocolSettingsDepositInterface__factory>;
    getContractFactory(
      name: "RocketDepositPoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RocketDepositPoolInterface__factory>;
    getContractFactory(
      name: "RocketStorageInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RocketStorageInterface__factory>;
    getContractFactory(
      name: "RocketTokenRETHInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RocketTokenRETHInterface__factory>;
    getContractFactory(
      name: "IStakewiseStaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakewiseStaker__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "DerivativeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DerivativeMock__factory>;
    getContractFactory(
      name: "IDerivativeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDerivativeMock__factory>;
    getContractFactory(
      name: "SafEthV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafEthV2Mock__factory>;
    getContractFactory(
      name: "SafEthV2MockStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafEthV2MockStorage__factory>;
    getContractFactory(
      name: "Ankr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ankr__factory>;
    getContractFactory(
      name: "Reth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reth__factory>;
    getContractFactory(
      name: "SfrxEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SfrxEth__factory>;
    getContractFactory(
      name: "StakeWise",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeWise__factory>;
    getContractFactory(
      name: "WstEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstEth__factory>;
    getContractFactory(
      name: "SafEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafEth__factory>;
    getContractFactory(
      name: "SafEthStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafEthStorage__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AfEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AfEth>;
    getContractAt(
      name: "IClaimZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimZap>;
    getContractAt(
      name: "ILockedCvx",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILockedCvx>;
    getContractAt(
      name: "IAfBundle1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAfBundle1155>;
    getContractAt(
      name: "IAfCVX1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAfCVX1155>;
    getContractAt(
      name: "AsymmetryStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AsymmetryStrategy>;
    getContractAt(
      name: "ICvxLockerV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICvxLockerV2>;
    getContractAt(
      name: "ILockedCvx",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILockedCvx>;
    getContractAt(
      name: "IAfBundle1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAfBundle1155>;
    getContractAt(
      name: "IAfCVX1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAfCVX1155>;
    getContractAt(
      name: "AnkrEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnkrEth>;
    getContractAt(
      name: "AnkrStaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnkrStaker>;
    getContractAt(
      name: "ICrvEthPool1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrvEthPool1>;
    getContractAt(
      name: "ICrvEthPool2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrvEthPool2>;
    getContractAt(
      name: "IFrxETHMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFrxETHMinter>;
    getContractAt(
      name: "IsFrxEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsFrxEth>;
    getContractAt(
      name: "IDerivative",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDerivative>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IStETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStETH>;
    getContractAt(
      name: "IWStETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWStETH>;
    getContractAt(
      name: "RocketDAOProtocolSettingsDepositInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RocketDAOProtocolSettingsDepositInterface>;
    getContractAt(
      name: "RocketDepositPoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RocketDepositPoolInterface>;
    getContractAt(
      name: "RocketStorageInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RocketStorageInterface>;
    getContractAt(
      name: "RocketTokenRETHInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RocketTokenRETHInterface>;
    getContractAt(
      name: "IStakewiseStaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakewiseStaker>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IUniswapV3Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Factory>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(
      name: "DerivativeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DerivativeMock>;
    getContractAt(
      name: "IDerivativeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDerivativeMock>;
    getContractAt(
      name: "SafEthV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafEthV2Mock>;
    getContractAt(
      name: "SafEthV2MockStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafEthV2MockStorage>;
    getContractAt(
      name: "Ankr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ankr>;
    getContractAt(
      name: "Reth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Reth>;
    getContractAt(
      name: "SfrxEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SfrxEth>;
    getContractAt(
      name: "StakeWise",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeWise>;
    getContractAt(
      name: "WstEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WstEth>;
    getContractAt(
      name: "SafEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafEth>;
    getContractAt(
      name: "SafEthStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafEthStorage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
