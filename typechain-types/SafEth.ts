/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SafEthInterface extends utils.Interface {
  functions: {
    "addDerivative(address,uint256)": FunctionFragment;
    "adjustWeight(uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "derivativeCount()": FunctionFragment;
    "derivatives(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string)": FunctionFragment;
    "maxAmount()": FunctionFragment;
    "minAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseStaking()": FunctionFragment;
    "pauseUnstaking()": FunctionFragment;
    "rebalanceToWeights()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxAmount(uint256)": FunctionFragment;
    "setMaxSlippage(uint256,uint256)": FunctionFragment;
    "setMinAmount(uint256)": FunctionFragment;
    "setPauseStaking(bool)": FunctionFragment;
    "setPauseUnstaking(bool)": FunctionFragment;
    "stake()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "weights(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDerivative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustWeight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "derivativeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "derivatives",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "maxAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseUnstaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceToWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSlippage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseStaking",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseUnstaking",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weights",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivativeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceToWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ChangeMaxAmount(uint256)": EventFragment;
    "ChangeMinAmount(uint256)": EventFragment;
    "DerivativeAdded(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Rebalanced()": EventFragment;
    "SetMaxSlippage(uint256,uint256)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "StakingPaused(bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unstaked(address,uint256,uint256)": EventFragment;
    "UnstakingPaused(bool)": EventFragment;
    "WeightChange(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMaxAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DerivativeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxSlippage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeightChange"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ChangeMaxAmountEvent = TypedEvent<
  [BigNumber],
  { maxAmount: BigNumber }
>;

export type ChangeMaxAmountEventFilter = TypedEventFilter<ChangeMaxAmountEvent>;

export type ChangeMinAmountEvent = TypedEvent<
  [BigNumber],
  { minAmount: BigNumber }
>;

export type ChangeMinAmountEventFilter = TypedEventFilter<ChangeMinAmountEvent>;

export type DerivativeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { contractAddress: string; weight: BigNumber; index: BigNumber }
>;

export type DerivativeAddedEventFilter = TypedEventFilter<DerivativeAddedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RebalancedEvent = TypedEvent<[], {}>;

export type RebalancedEventFilter = TypedEventFilter<RebalancedEvent>;

export type SetMaxSlippageEvent = TypedEvent<
  [BigNumber, BigNumber],
  { index: BigNumber; slippage: BigNumber }
>;

export type SetMaxSlippageEventFilter = TypedEventFilter<SetMaxSlippageEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; ethIn: BigNumber; safEthOut: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type StakingPausedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type StakingPausedEventFilter = TypedEventFilter<StakingPausedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; ethOut: BigNumber; safEthIn: BigNumber }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export type UnstakingPausedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type UnstakingPausedEventFilter = TypedEventFilter<UnstakingPausedEvent>;

export type WeightChangeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { index: BigNumber; weight: BigNumber }
>;

export type WeightChangeEventFilter = TypedEventFilter<WeightChangeEvent>;

export interface SafEth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafEthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDerivative(
      _contractAddress: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustWeight(
      _derivativeIndex: BigNumberish,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    derivativeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseStaking(overrides?: CallOverrides): Promise<[boolean]>;

    pauseUnstaking(overrides?: CallOverrides): Promise<[boolean]>;

    rebalanceToWeights(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSlippage(
      _derivativeIndex: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAmount(
      _minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseStaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseUnstaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _safEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addDerivative(
    _contractAddress: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustWeight(
    _derivativeIndex: BigNumberish,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  derivativeCount(overrides?: CallOverrides): Promise<BigNumber>;

  derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _tokenName: string,
    _tokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseStaking(overrides?: CallOverrides): Promise<boolean>;

  pauseUnstaking(overrides?: CallOverrides): Promise<boolean>;

  rebalanceToWeights(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAmount(
    _maxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSlippage(
    _derivativeIndex: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAmount(
    _minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseStaking(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseUnstaking(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _safEthAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weights(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addDerivative(
      _contractAddress: string,
      _weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustWeight(
      _derivativeIndex: BigNumberish,
      _weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    derivativeCount(overrides?: CallOverrides): Promise<BigNumber>;

    derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseStaking(overrides?: CallOverrides): Promise<boolean>;

    pauseUnstaking(overrides?: CallOverrides): Promise<boolean>;

    rebalanceToWeights(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSlippage(
      _derivativeIndex: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAmount(
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseStaking(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    setPauseUnstaking(
      _pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _safEthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    weights(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ChangeMaxAmount(uint256)"(
      maxAmount?: BigNumberish | null
    ): ChangeMaxAmountEventFilter;
    ChangeMaxAmount(
      maxAmount?: BigNumberish | null
    ): ChangeMaxAmountEventFilter;

    "ChangeMinAmount(uint256)"(
      minAmount?: BigNumberish | null
    ): ChangeMinAmountEventFilter;
    ChangeMinAmount(
      minAmount?: BigNumberish | null
    ): ChangeMinAmountEventFilter;

    "DerivativeAdded(address,uint256,uint256)"(
      contractAddress?: string | null,
      weight?: null,
      index?: null
    ): DerivativeAddedEventFilter;
    DerivativeAdded(
      contractAddress?: string | null,
      weight?: null,
      index?: null
    ): DerivativeAddedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Rebalanced()"(): RebalancedEventFilter;
    Rebalanced(): RebalancedEventFilter;

    "SetMaxSlippage(uint256,uint256)"(
      index?: BigNumberish | null,
      slippage?: null
    ): SetMaxSlippageEventFilter;
    SetMaxSlippage(
      index?: BigNumberish | null,
      slippage?: null
    ): SetMaxSlippageEventFilter;

    "Staked(address,uint256,uint256)"(
      recipient?: string | null,
      ethIn?: null,
      safEthOut?: null
    ): StakedEventFilter;
    Staked(
      recipient?: string | null,
      ethIn?: null,
      safEthOut?: null
    ): StakedEventFilter;

    "StakingPaused(bool)"(paused?: boolean | null): StakingPausedEventFilter;
    StakingPaused(paused?: boolean | null): StakingPausedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unstaked(address,uint256,uint256)"(
      recipient?: string | null,
      ethOut?: null,
      safEthIn?: null
    ): UnstakedEventFilter;
    Unstaked(
      recipient?: string | null,
      ethOut?: null,
      safEthIn?: null
    ): UnstakedEventFilter;

    "UnstakingPaused(bool)"(
      paused?: boolean | null
    ): UnstakingPausedEventFilter;
    UnstakingPaused(paused?: boolean | null): UnstakingPausedEventFilter;

    "WeightChange(uint256,uint256)"(
      index?: BigNumberish | null,
      weight?: null
    ): WeightChangeEventFilter;
    WeightChange(
      index?: BigNumberish | null,
      weight?: null
    ): WeightChangeEventFilter;
  };

  estimateGas: {
    addDerivative(
      _contractAddress: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustWeight(
      _derivativeIndex: BigNumberish,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    derivativeCount(overrides?: CallOverrides): Promise<BigNumber>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseStaking(overrides?: CallOverrides): Promise<BigNumber>;

    pauseUnstaking(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceToWeights(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSlippage(
      _derivativeIndex: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAmount(
      _minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseStaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseUnstaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _safEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weights(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addDerivative(
      _contractAddress: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustWeight(
      _derivativeIndex: BigNumberish,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    derivativeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseUnstaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceToWeights(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAmount(
      _maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSlippage(
      _derivativeIndex: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmount(
      _minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseStaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseUnstaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _safEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
