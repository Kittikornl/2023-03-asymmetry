/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AsymmetryStrategyInterface extends utils.Interface {
  functions: {
    "addAfEthCrvLiquidity(address,uint256,uint256)": FunctionFragment;
    "depositREth(uint256)": FunctionFragment;
    "depositSfrax(uint256)": FunctionFragment;
    "depositWstEth(uint256)": FunctionFragment;
    "getAsymmetryRatio()": FunctionFragment;
    "getCrvPriceData()": FunctionFragment;
    "getCvxPriceData()": FunctionFragment;
    "getName()": FunctionFragment;
    "lockCvx(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "positions(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rethPrice(uint256)": FunctionFragment;
    "setPauseStaking(bool)": FunctionFragment;
    "setPauseuntaking(bool)": FunctionFragment;
    "setVault(address,address)": FunctionFragment;
    "sfrxEthPrice(uint256)": FunctionFragment;
    "stake()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapExactInputSingleHop(address,address,uint24,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(bool)": FunctionFragment;
    "vaults(address)": FunctionFragment;
    "withdrawCRVPool(address,uint256)": FunctionFragment;
    "withdrawREth()": FunctionFragment;
    "withdrawSfrax(uint256)": FunctionFragment;
    "withdrawWstEth(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAfEthCrvLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositREth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSfrax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWstEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAsymmetryRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCrvPriceData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCvxPriceData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockCvx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rethPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseStaking",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseuntaking",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sfrxEthPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputSingleHop",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values: [boolean]): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawCRVPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawREth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSfrax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWstEth",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAfEthCrvLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositREth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositSfrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWstEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAsymmetryRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrvPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCvxPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCvx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rethPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseuntaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sfrxEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputSingleHop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCRVPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawREth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSfrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWstEth",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StakingPaused(bool)": EventFragment;
    "UnstakingPaused(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingPaused"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakingPausedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type StakingPausedEventFilter = TypedEventFilter<StakingPausedEvent>;

export type UnstakingPausedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type UnstakingPausedEventFilter = TypedEventFilter<UnstakingPausedEvent>;

export interface AsymmetryStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AsymmetryStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAfEthCrvLiquidity(
      _pool: string,
      _ethAmount: BigNumberish,
      _afEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositREth(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositSfrax(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWstEth(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAsymmetryRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    getCrvPriceData(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCvxPriceData(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    lockCvx(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        positionID: BigNumber;
        userAddress: string;
        rocketBalances: BigNumber;
        lidoBalances: BigNumber;
        curveBalances: BigNumber;
        convexBalances: BigNumber;
        balancerBalances: BigNumber;
        cvxNFTID: BigNumber;
        bundleNFTID: BigNumber;
        afETH: BigNumber;
        createdAt: BigNumber;
        sfraxBalances: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rethPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setPauseStaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseuntaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sfrxEthPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapExactInputSingleHop(
      tokenIn: string,
      tokenOut: string,
      poolFee: BigNumberish,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _instantWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    withdrawCRVPool(
      _pool: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawREth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSfrax(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawWstEth(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAfEthCrvLiquidity(
    _pool: string,
    _ethAmount: BigNumberish,
    _afEthAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositREth(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositSfrax(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWstEth(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAsymmetryRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getCrvPriceData(overrides?: CallOverrides): Promise<BigNumber>;

  getCvxPriceData(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  lockCvx(
    _amountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      positionID: BigNumber;
      userAddress: string;
      rocketBalances: BigNumber;
      lidoBalances: BigNumber;
      curveBalances: BigNumber;
      convexBalances: BigNumber;
      balancerBalances: BigNumber;
      cvxNFTID: BigNumber;
      bundleNFTID: BigNumber;
      afETH: BigNumber;
      createdAt: BigNumber;
      sfraxBalances: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rethPrice(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setPauseStaking(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseuntaking(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVault(
    _token: string,
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sfrxEthPrice(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapExactInputSingleHop(
    tokenIn: string,
    tokenOut: string,
    poolFee: BigNumberish,
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _instantWithdraw: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(arg0: string, overrides?: CallOverrides): Promise<string>;

  withdrawCRVPool(
    _pool: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawREth(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSfrax(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawWstEth(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAfEthCrvLiquidity(
      _pool: string,
      _ethAmount: BigNumberish,
      _afEthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositREth(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositSfrax(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositWstEth(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAsymmetryRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getCrvPriceData(overrides?: CallOverrides): Promise<BigNumber>;

    getCvxPriceData(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    lockCvx(
      _amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        positionID: BigNumber;
        userAddress: string;
        rocketBalances: BigNumber;
        lidoBalances: BigNumber;
        curveBalances: BigNumber;
        convexBalances: BigNumber;
        balancerBalances: BigNumber;
        cvxNFTID: BigNumber;
        bundleNFTID: BigNumber;
        afETH: BigNumber;
        createdAt: BigNumber;
        sfraxBalances: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rethPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPauseStaking(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    setPauseuntaking(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sfrxEthPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapExactInputSingleHop(
      tokenIn: string,
      tokenOut: string,
      poolFee: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _instantWithdraw: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<string>;

    withdrawCRVPool(
      _pool: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawREth(overrides?: CallOverrides): Promise<void>;

    withdrawSfrax(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawWstEth(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StakingPaused(bool)"(paused?: null): StakingPausedEventFilter;
    StakingPaused(paused?: null): StakingPausedEventFilter;

    "UnstakingPaused(bool)"(paused?: null): UnstakingPausedEventFilter;
    UnstakingPaused(paused?: null): UnstakingPausedEventFilter;
  };

  estimateGas: {
    addAfEthCrvLiquidity(
      _pool: string,
      _ethAmount: BigNumberish,
      _afEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositREth(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositSfrax(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWstEth(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAsymmetryRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getCrvPriceData(overrides?: CallOverrides): Promise<BigNumber>;

    getCvxPriceData(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    lockCvx(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rethPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPauseStaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseuntaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sfrxEthPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInputSingleHop(
      tokenIn: string,
      tokenOut: string,
      poolFee: BigNumberish,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _instantWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCRVPool(
      _pool: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawREth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSfrax(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawWstEth(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAfEthCrvLiquidity(
      _pool: string,
      _ethAmount: BigNumberish,
      _afEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositREth(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositSfrax(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWstEth(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAsymmetryRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCrvPriceData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCvxPriceData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockCvx(
      _amountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rethPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPauseStaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseuntaking(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sfrxEthPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactInputSingleHop(
      tokenIn: string,
      tokenOut: string,
      poolFee: BigNumberish,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _instantWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCRVPool(
      _pool: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawREth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSfrax(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWstEth(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
