{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "973521533da0ff12a6de1b55cdaaebe24b092e23f2da4323afc8fe87a09510f0",
          "withoutMetadata": "8168360d31c429125c811b8143bc0e9a5701929ecfb43d11b705c942109c5ae8",
          "linkedWithoutMetadata": "8168360d31c429125c811b8143bc0e9a5701929ecfb43d11b705c942109c5ae8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e14ecf2926a8c695166b4b1eddffb9a072b5a9afaee17e98cc08cee2c5975641",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "69812d9065556a1bcf7c4762f1eb7ea312637bd9a3f96c095ef44c90ff35d9aa",
          "withoutMetadata": "b0772e9cb17c05855f9ab9a51a284c121134e89b6b1537b032045e271bf7f4b9",
          "linkedWithoutMetadata": "b0772e9cb17c05855f9ab9a51a284c121134e89b6b1537b032045e271bf7f4b9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/SafEth.sol:SafEth": {
        "src": "contracts/SafEth/SafEth.sol:15",
        "version": {
          "withMetadata": "3caed9e9332dac7012ce2d71997e4906466f8f077afc57cefe9761d83131e86b",
          "withoutMetadata": "5bcef18e62ea79e7bd5a1f5aefb61908b9ced3b6e90b3dea071885c44869cd3b",
          "linkedWithoutMetadata": "5bcef18e62ea79e7bd5a1f5aefb61908b9ced3b6e90b3dea071885c44869cd3b"
        },
        "inherit": [
          "contracts/SafEth/SafEthStorage.sol:SafEthStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(string,string)",
          "stake()",
          "unstake(uint256)",
          "rebalanceToWeights()",
          "adjustWeight(uint256,uint256)",
          "addDerivative(address,uint256)",
          "setMaxSlippage(uint256,uint256)",
          "setMinAmount(uint256)",
          "setMaxAmount(uint256)",
          "setPauseStaking(bool)",
          "setPauseUnstaking(bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "152",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)3400)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)3400": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)3400)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/SafEthStorage.sol:SafEthStorage": {
        "src": "contracts/SafEth/SafEthStorage.sol:15",
        "version": {
          "withMetadata": "1519faea92a6d50a70714d037403ba4b1cfa7547573a5fe73e1cfa0c612f842d",
          "withoutMetadata": "aa2d7a64b9204a0b0a51d1554c30d920529bd3c82208d624631aa85d0805a237",
          "linkedWithoutMetadata": "aa2d7a64b9204a0b0a51d1554c30d920529bd3c82208d624631aa85d0805a237"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)3400)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)3400": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)3400)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/SfrxEth.sol:SfrxEth": {
        "src": "contracts/SafEth/derivatives/SfrxEth.sol:13",
        "version": {
          "withMetadata": "ffeba1625b4434b42291c333b11ad97ea1b77bad40d5db7bf772c27ca6e546e4",
          "withoutMetadata": "1e7b62dced3e34139574c43eed15e2b7e90964d754460babfd7030be88c7cbfe",
          "linkedWithoutMetadata": "1e7b62dced3e34139574c43eed15e2b7e90964d754460babfd7030be88c7cbfe"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "SfrxEth",
              "src": "contracts/SafEth/derivatives/SfrxEth.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/WstEth.sol:WstEth": {
        "src": "contracts/SafEth/derivatives/WstEth.sol:12",
        "version": {
          "withMetadata": "a86fc6ca2fa7d43940543c4b9f3534e3ebdfe88900c10a7ab9c5dc719a2b01ed",
          "withoutMetadata": "1216d9619a3778667a5f217208399bdd2d59405c1be23d838ac752ff7a3981b3",
          "linkedWithoutMetadata": "1216d9619a3778667a5f217208399bdd2d59405c1be23d838ac752ff7a3981b3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "WstEth",
              "src": "contracts/SafEth/derivatives/WstEth.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/IDerivative.sol:IDerivative": {
        "src": "contracts/interfaces/IDerivative.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "deposit()",
          "withdraw(uint256)",
          "ethPerDerivative(uint256)",
          "balance()",
          "setMaxSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/IAfEthPool.sol:IAfEthPool": {
        "src": "contracts/interfaces/curve/IAfEthPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add_liquidity(uint256[2],uint256,bool)",
          "remove_liquidity(uint256,uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/IAnkrEthEthPool.sol:IAnkrEthEthPool": {
        "src": "contracts/interfaces/curve/IAnkrEthEthPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)",
          "get_virtual_price()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICrvEthPool.sol:ICrvEthPool": {
        "src": "contracts/interfaces/curve/ICrvEthPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(uint256,uint256,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)",
          "get_virtual_price()",
          "price_oracle()",
          "get_dy(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICrvEthPoolLegacy.sol:ICrvEthPoolLegacy": {
        "src": "contracts/interfaces/curve/ICrvEthPoolLegacy.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add_liquidity(uint256[2],uint256,bool)",
          "remove_liquidity(uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)",
          "get_dy(uint256,uint256,uint256)",
          "coins(uint256)",
          "price_oracle()",
          "get_virtual_price()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICvxCrvCrvPool.sol:ICvxCrvCrvPool": {
        "src": "contracts/interfaces/curve/ICvxCrvCrvPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "get_dy(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICvxFxsFxsPool.sol:ICvxFxsFxsPool": {
        "src": "contracts/interfaces/curve/ICvxFxsFxsPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(uint256,uint256,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)",
          "get_virtual_price()",
          "price_oracle()",
          "get_dy(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/IFrxEthEthPool.sol:IFrxEthEthPool": {
        "src": "contracts/interfaces/curve/IFrxEthEthPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)",
          "price_oracle()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/IFxsEthPool.sol:IFxsEthPool": {
        "src": "contracts/interfaces/curve/IFxsEthPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(uint256,uint256,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)",
          "get_virtual_price()",
          "price_oracle()",
          "get_dy(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/IStEthEthPool.sol:IStEthEthPool": {
        "src": "contracts/interfaces/curve/IStEthEthPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(int128,int128,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/frax/IFrxETHMinter.sol:IFrxETHMinter": {
        "src": "contracts/interfaces/frax/IFrxETHMinter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "submitAndDeposit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/frax/IsFrxEth.sol:IsFrxEth": {
        "src": "contracts/interfaces/frax/IsFrxEth.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "redeem(uint256,address,address)",
          "approve(address,uint256)",
          "convertToAssets(uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/lido/IWStETH.sol:IWStETH": {
        "src": "contracts/interfaces/lido/IWStETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unwrap(uint256)",
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "stEthPerToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/lido/IstETH.sol:IStETH": {
        "src": "contracts/interfaces/lido/IstETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getTotalShares()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/ISwapRouter.sol:ISwapRouter": {
        "src": "contracts/interfaces/uniswap/ISwapRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/DerivativeMock.sol:DerivativeMock": {
        "src": "contracts/mocks/DerivativeMock.sol:14",
        "version": {
          "withMetadata": "de7d84d8e19853f8dbf0b302f4dd4dc946e5244d9fe14ba8d4b1eafc867c8fc5",
          "withoutMetadata": "ce616d6b13eede9ac1513c7b43e38fec17d5a0a57a54b40692a8f4268ad60de7",
          "linkedWithoutMetadata": "ce616d6b13eede9ac1513c7b43e38fec17d5a0a57a54b40692a8f4268ad60de7"
        },
        "inherit": [
          "contracts/SafEth/derivatives/SfrxEth.sol:SfrxEth",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "SfrxEth",
              "src": "contracts/SafEth/derivatives/SfrxEth.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/IDerivativeMock.sol:IDerivativeMock": {
        "src": "contracts/mocks/IDerivativeMock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "ethPerDerivative(uint256)",
          "balance()",
          "withdrawAll()",
          "setMaxSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/SafEthV2Mock.sol:SafEthV2Mock": {
        "src": "contracts/mocks/SafEthV2Mock.sol:7",
        "version": {
          "withMetadata": "396e66c7b4ffae8bdaccf0400ecc5378c3634f77b5899ebd18645fcc0512e9fc",
          "withoutMetadata": "1d7712ad41a970429902e907d124bb4d10c92eb55dde65648b7eacd5c4235992",
          "linkedWithoutMetadata": "1d7712ad41a970429902e907d124bb4d10c92eb55dde65648b7eacd5c4235992"
        },
        "inherit": [
          "contracts/mocks/SafEthV2MockStorage.sol:SafEthV2MockStorage",
          "contracts/SafEth/SafEth.sol:SafEth",
          "contracts/SafEth/SafEthStorage.sol:SafEthStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "newFunction()",
          "adminWithdrawDerivative(uint256,uint256)",
          "adminWithdrawErc20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "152",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)3400)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            },
            {
              "label": "newFunctionCalled",
              "offset": 0,
              "slot": "158",
              "type": "t_bool",
              "contract": "SafEthV2MockStorage",
              "src": "contracts/mocks/SafEthV2MockStorage.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)3400": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)3400)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/SafEthV2MockStorage.sol:SafEthV2MockStorage": {
        "src": "contracts/mocks/SafEthV2MockStorage.sol:6",
        "version": {
          "withMetadata": "57a5dbab4ef7c025cac257509f8ee3bf3e025432c28acee111865f901112f28e",
          "withoutMetadata": "30592c3de0185e6c148b55812afb875d12f99e63e8efbd71f8f55cf9bccdf6e7",
          "linkedWithoutMetadata": "30592c3de0185e6c148b55812afb875d12f99e63e8efbd71f8f55cf9bccdf6e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "newFunctionCalled",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthV2MockStorage",
              "src": "contracts/mocks/SafEthV2MockStorage.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "973521533da0ff12a6de1b55cdaaebe24b092e23f2da4323afc8fe87a09510f0",
          "withoutMetadata": "8168360d31c429125c811b8143bc0e9a5701929ecfb43d11b705c942109c5ae8",
          "linkedWithoutMetadata": "8168360d31c429125c811b8143bc0e9a5701929ecfb43d11b705c942109c5ae8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e14ecf2926a8c695166b4b1eddffb9a072b5a9afaee17e98cc08cee2c5975641",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "69812d9065556a1bcf7c4762f1eb7ea312637bd9a3f96c095ef44c90ff35d9aa",
          "withoutMetadata": "b0772e9cb17c05855f9ab9a51a284c121134e89b6b1537b032045e271bf7f4b9",
          "linkedWithoutMetadata": "b0772e9cb17c05855f9ab9a51a284c121134e89b6b1537b032045e271bf7f4b9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/SafEth.sol:SafEth": {
        "src": "contracts/SafEth/SafEth.sol:15",
        "version": {
          "withMetadata": "ec963f57dad961fc80ec045219ceb9676e65778716af02ce6f19ea79a33237dc",
          "withoutMetadata": "54091a35b787d5ffcdcae93bb659b2148dd81b1607df9d7b30e0be4f9bf5c75f",
          "linkedWithoutMetadata": "54091a35b787d5ffcdcae93bb659b2148dd81b1607df9d7b30e0be4f9bf5c75f"
        },
        "inherit": [
          "contracts/SafEth/SafEthStorage.sol:SafEthStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(string,string)",
          "stake()",
          "unstake(uint256)",
          "rebalanceToWeights()",
          "adjustWeight(uint256,uint256)",
          "addDerivative(address,uint256)",
          "setMaxSlippage(uint256,uint256)",
          "setMinAmount(uint256)",
          "setMaxAmount(uint256)",
          "setPauseStaking(bool)",
          "setPauseUnstaking(bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "152",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)4733)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)4733": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)4733)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/SafEthStorage.sol:SafEthStorage": {
        "src": "contracts/SafEth/SafEthStorage.sol:15",
        "version": {
          "withMetadata": "1519faea92a6d50a70714d037403ba4b1cfa7547573a5fe73e1cfa0c612f842d",
          "withoutMetadata": "aa2d7a64b9204a0b0a51d1554c30d920529bd3c82208d624631aa85d0805a237",
          "linkedWithoutMetadata": "aa2d7a64b9204a0b0a51d1554c30d920529bd3c82208d624631aa85d0805a237"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)4733)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)4733": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)4733)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/Ankr.sol:Ankr": {
        "src": "contracts/SafEth/derivatives/Ankr.sol:14",
        "version": {
          "withMetadata": "08b88caa4ea7aafc704502e9963ff2554887b42dedf5e2c1394002aa2be772b1",
          "withoutMetadata": "28e35382865a698f73f5389a3121e295760c7c776bf8d11a6a52eb4e7548c82c",
          "linkedWithoutMetadata": "28e35382865a698f73f5389a3121e295760c7c776bf8d11a6a52eb4e7548c82c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "Ankr",
              "src": "contracts/SafEth/derivatives/Ankr.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/Reth.sol:Reth": {
        "src": "contracts/SafEth/derivatives/Reth.sol:19",
        "version": {
          "withMetadata": "9fab79d863fc662795ff520e19dcc06aaddce1183d9a3839626fedaa728bb12d",
          "withoutMetadata": "166d7675286fe8d4a8409afcbdbe16744dadf1b6ba7ee70d3bbd16a3b3a6ec56",
          "linkedWithoutMetadata": "166d7675286fe8d4a8409afcbdbe16744dadf1b6ba7ee70d3bbd16a3b3a6ec56"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "Reth",
              "src": "contracts/SafEth/derivatives/Reth.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/SfrxEth.sol:SfrxEth": {
        "src": "contracts/SafEth/derivatives/SfrxEth.sol:13",
        "version": {
          "withMetadata": "aecbafa5ae9bd89466324050316812776a57c34df5fe67a05e0f9d1c5d56b2f2",
          "withoutMetadata": "1e7b62dced3e34139574c43eed15e2b7e90964d754460babfd7030be88c7cbfe",
          "linkedWithoutMetadata": "1e7b62dced3e34139574c43eed15e2b7e90964d754460babfd7030be88c7cbfe"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "SfrxEth",
              "src": "contracts/SafEth/derivatives/SfrxEth.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/StakeWise.sol:StakeWise": {
        "src": "contracts/SafEth/derivatives/StakeWise.sol:17",
        "version": {
          "withMetadata": "38abf409a134892889e6b32a3e237bd36cfcd531771d79feda8156d8c06febb5",
          "withoutMetadata": "cb4df89e02fc094ded7bc46de2df4ae525a43601b361cffe247155b931c1b5bd",
          "linkedWithoutMetadata": "cb4df89e02fc094ded7bc46de2df4ae525a43601b361cffe247155b931c1b5bd"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "StakeWise",
              "src": "contracts/SafEth/derivatives/StakeWise.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/WstEth.sol:WstEth": {
        "src": "contracts/SafEth/derivatives/WstEth.sol:12",
        "version": {
          "withMetadata": "b95f477534f591ef886b88bfdebdc1ab4fe583475f4bf339f08aa62a96a49d3d",
          "withoutMetadata": "1216d9619a3778667a5f217208399bdd2d59405c1be23d838ac752ff7a3981b3",
          "linkedWithoutMetadata": "1216d9619a3778667a5f217208399bdd2d59405c1be23d838ac752ff7a3981b3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "WstEth",
              "src": "contracts/SafEth/derivatives/WstEth.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/IDerivative.sol:IDerivative": {
        "src": "contracts/interfaces/IDerivative.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "deposit()",
          "withdraw(uint256)",
          "ethPerDerivative(uint256)",
          "balance()",
          "setMaxSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/ankr/AnkrEth.sol:AnkrEth": {
        "src": "contracts/interfaces/ankr/AnkrEth.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "bondsToShares(uint256)",
          "sharesToBonds(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/ankr/AnkrStaker.sol:AnkrStaker": {
        "src": "contracts/interfaces/ankr/AnkrStaker.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stakeAndClaimAethC()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICrvEthPool1.sol:ICrvEthPool1": {
        "src": "contracts/interfaces/curve/ICrvEthPool1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add_liquidity(uint256[2],uint256,bool)",
          "remove_liquidity(uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)",
          "get_dy(uint256,uint256,uint256)",
          "coins(uint256)",
          "price_oracle()",
          "get_virtual_price()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICrvEthPool2.sol:ICrvEthPool2": {
        "src": "contracts/interfaces/curve/ICrvEthPool2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(uint256,uint256,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/frax/IFrxETHMinter.sol:IFrxETHMinter": {
        "src": "contracts/interfaces/frax/IFrxETHMinter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "submitAndDeposit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/frax/IsFrxEth.sol:IsFrxEth": {
        "src": "contracts/interfaces/frax/IsFrxEth.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "redeem(uint256,address,address)",
          "approve(address,uint256)",
          "convertToAssets(uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/lido/IWStETH.sol:IWStETH": {
        "src": "contracts/interfaces/lido/IWStETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unwrap(uint256)",
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "stEthPerToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/lido/IstETH.sol:IStETH": {
        "src": "contracts/interfaces/lido/IstETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getTotalShares()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketDAOProtocolSettingsDepositInterface.sol:RocketDAOProtocolSettingsDepositInterface": {
        "src": "contracts/interfaces/rocketpool/RocketDAOProtocolSettingsDepositInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDepositEnabled()",
          "getAssignDepositsEnabled()",
          "getMinimumDeposit()",
          "getMaximumDepositPoolSize()",
          "getMaximumDepositAssignments()",
          "getDepositFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketDepositPoolInterface.sol:RocketDepositPoolInterface": {
        "src": "contracts/interfaces/rocketpool/RocketDepositPoolInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance()",
          "getExcessBalance()",
          "deposit()",
          "recycleDissolvedDeposit()",
          "recycleExcessCollateral()",
          "recycleLiquidatedStake()",
          "assignDeposits()",
          "withdrawExcessBalance(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketStorageInterface.sol:RocketStorageInterface": {
        "src": "contracts/interfaces/rocketpool/RocketStorageInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketTokenRETHInterface.sol:RocketTokenRETHInterface": {
        "src": "contracts/interfaces/rocketpool/RocketTokenRETHInterface.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/stakewise/IStakewiseStaker.sol:IStakewiseStaker": {
        "src": "contracts/interfaces/stakewise/IStakewiseStaker.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "stake()",
          "minActivatingDeposit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/ISwapRouter.sol:ISwapRouter": {
        "src": "contracts/interfaces/uniswap/ISwapRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/uniswap/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/uniswap/IUniswapV3Pool.sol:15",
        "inherit": [
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/DerivativeMock.sol:DerivativeMock": {
        "src": "contracts/mocks/DerivativeMock.sol:14",
        "version": {
          "withMetadata": "8aeb55a1619cd674e285dd4c4f539c2f4a6f830d41d3180a442bec67f08f9ca3",
          "withoutMetadata": "ce616d6b13eede9ac1513c7b43e38fec17d5a0a57a54b40692a8f4268ad60de7",
          "linkedWithoutMetadata": "ce616d6b13eede9ac1513c7b43e38fec17d5a0a57a54b40692a8f4268ad60de7"
        },
        "inherit": [
          "contracts/SafEth/derivatives/SfrxEth.sol:SfrxEth",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "SfrxEth",
              "src": "contracts/SafEth/derivatives/SfrxEth.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/IDerivativeMock.sol:IDerivativeMock": {
        "src": "contracts/mocks/IDerivativeMock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "ethPerDerivative(uint256)",
          "balance()",
          "withdrawAll()",
          "setMaxSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/SafEthV2Mock.sol:SafEthV2Mock": {
        "src": "contracts/mocks/SafEthV2Mock.sol:7",
        "version": {
          "withMetadata": "0e8e7dcfbfd4869964dc336dd9ded94bf9b9027ec290b858814aea9dde9de87e",
          "withoutMetadata": "abd16f61a4f1de11ed041c5487bc53586ee278b105e661f942c1bfb53948d61f",
          "linkedWithoutMetadata": "abd16f61a4f1de11ed041c5487bc53586ee278b105e661f942c1bfb53948d61f"
        },
        "inherit": [
          "contracts/mocks/SafEthV2MockStorage.sol:SafEthV2MockStorage",
          "contracts/SafEth/SafEth.sol:SafEth",
          "contracts/SafEth/SafEthStorage.sol:SafEthStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "newFunction()",
          "adminWithdrawDerivative(uint256,uint256)",
          "adminWithdrawErc20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "152",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)4733)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            },
            {
              "label": "newFunctionCalled",
              "offset": 0,
              "slot": "158",
              "type": "t_bool",
              "contract": "SafEthV2MockStorage",
              "src": "contracts/mocks/SafEthV2MockStorage.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)4733": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)4733)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/SafEthV2MockStorage.sol:SafEthV2MockStorage": {
        "src": "contracts/mocks/SafEthV2MockStorage.sol:6",
        "version": {
          "withMetadata": "57a5dbab4ef7c025cac257509f8ee3bf3e025432c28acee111865f901112f28e",
          "withoutMetadata": "30592c3de0185e6c148b55812afb875d12f99e63e8efbd71f8f55cf9bccdf6e7",
          "linkedWithoutMetadata": "30592c3de0185e6c148b55812afb875d12f99e63e8efbd71f8f55cf9bccdf6e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "newFunctionCalled",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthV2MockStorage",
              "src": "contracts/mocks/SafEthV2MockStorage.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "973521533da0ff12a6de1b55cdaaebe24b092e23f2da4323afc8fe87a09510f0",
          "withoutMetadata": "8168360d31c429125c811b8143bc0e9a5701929ecfb43d11b705c942109c5ae8",
          "linkedWithoutMetadata": "8168360d31c429125c811b8143bc0e9a5701929ecfb43d11b705c942109c5ae8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e14ecf2926a8c695166b4b1eddffb9a072b5a9afaee17e98cc08cee2c5975641",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:14",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "87a405e1e30daec27b453f084a60e8a837944ac49539e0ed5c471846a7c2d96a",
          "withoutMetadata": "95ffdf2cb416a8f786e5395a8f5a85314cc00677dbd16df26930bd86e2473f04",
          "linkedWithoutMetadata": "95ffdf2cb416a8f786e5395a8f5a85314cc00677dbd16df26930bd86e2473f04"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "69812d9065556a1bcf7c4762f1eb7ea312637bd9a3f96c095ef44c90ff35d9aa",
          "withoutMetadata": "b0772e9cb17c05855f9ab9a51a284c121134e89b6b1537b032045e271bf7f4b9",
          "linkedWithoutMetadata": "b0772e9cb17c05855f9ab9a51a284c121134e89b6b1537b032045e271bf7f4b9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:11",
        "version": {
          "withMetadata": "ac5e20df7be8163a4ee7e4b2ce5c0c793af4a477e59a0cc08e98065731570f46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "81382033b722b078242f8867439177fe6f053c977ba524ac7bcf80ecd1a450b2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AfEth/AfEth.sol:AfEth": {
        "src": "contracts/AfEth/AfEth.sol:17",
        "version": {
          "withMetadata": "f994c2dc4edd09340fbde6cf20fbd4e65ea82f1c1ea1143aea2cd502a40adebf",
          "withoutMetadata": "4b71be2a291173fcfca6b888e0c976fe324d083ee5a46eeaca7faf87ec067df3",
          "linkedWithoutMetadata": "4b71be2a291173fcfca6b888e0c976fe324d083ee5a46eeaca7faf87ec067df3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [
          "hardhat/console.sol:console"
        ],
        "methods": [
          "(address,address,address,address)",
          "getCvxPriceData()",
          "getCrvPriceData()",
          "getAsymmetryRatio()",
          "swapExactInputSingleHop(address,address,uint24,uint256)",
          "lockCvx(uint256)",
          "addAfEthCrvLiquidity(address,uint256,uint256)",
          "withdrawCRVPool(address,uint256)",
          "claimRewards()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AfEth",
            "src": "contracts/AfEth/AfEth.sol:74"
          },
          {
            "kind": "state-variable-assignment",
            "name": "currentBundleNftId",
            "src": "contracts/AfEth/AfEth.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "emissionsPerYear",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:29"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(Position)3570_storage)",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:31"
            },
            {
              "label": "currentCvxNftId",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:64"
            },
            {
              "label": "currentBundleNftId",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:66"
            },
            {
              "label": "afETH",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:67"
            },
            {
              "label": "CVXNFT",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:68"
            },
            {
              "label": "bundleNFT",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:69"
            },
            {
              "label": "crvPool",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:70"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AfEth",
              "src": "contracts/AfEth/AfEth.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Position)3570_storage)": {
              "label": "mapping(address => struct AfEth.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3570_storage": {
              "label": "struct AfEth.Position",
              "members": [
                {
                  "label": "positionID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "curveBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "convexBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "cvxNFTID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "bundleNFTID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "afETH",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "createdAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AfEth/interfaces/IAf1155.sol:IAfBundle1155": {
        "src": "contracts/AfEth/interfaces/IAf1155.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256,uint256,uint256,uint256,address)",
          "burnBatch(address,uint256[2],uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AfEth/interfaces/IAf1155.sol:IAfCVX1155": {
        "src": "contracts/AfEth/interfaces/IAf1155.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256,uint256,address)",
          "burn(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AfEth/interfaces/convex/IClaimZap.sol:IClaimZap": {
        "src": "contracts/AfEth/interfaces/convex/IClaimZap.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AfEth/interfaces/convex/ILockedCvx.sol:ILockedCvx": {
        "src": "contracts/AfEth/interfaces/convex/ILockedCvx.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lock(address,uint256,uint256)",
          "processExpiredLocks(bool)",
          "getReward(address,bool)",
          "balanceAtEpochOf(uint256,address)",
          "totalSupplyAtEpoch(uint256)",
          "epochCount()",
          "epochs(uint256)",
          "checkpointEpoch()",
          "balanceOf(address)",
          "lockedBalanceOf(address)",
          "pendingLockOf(address)",
          "pendingLockAtEpochOf(uint256,address)",
          "totalSupply()",
          "lockedBalances(address)",
          "addReward(address,address,bool)",
          "approveRewardDistributor(address,address,bool)",
          "setStakeLimits(uint256,uint256)",
          "setBoost(uint256,uint256,address)",
          "setKickIncentive(uint256,uint256)",
          "shutdown()",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:AsymmetryStrategy": {
        "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:36",
        "version": {
          "withMetadata": "ca06ec18b2e48cea917280ecb1fcb04f187c0174f2f43d953b04b417cef58449",
          "withoutMetadata": "e75b76c3a54ba8017ecf8df7a34f83e0c883de5a6743f77bd5705176123e1259",
          "linkedWithoutMetadata": "e75b76c3a54ba8017ecf8df7a34f83e0c883de5a6743f77bd5705176123e1259"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "stake()",
          "unstake(bool)",
          "getAsymmetryRatio()",
          "swapExactInputSingleHop(address,address,uint24,uint256)",
          "lockCvx(uint256)",
          "depositSfrax(uint256)",
          "rethPrice(uint256)",
          "sfrxEthPrice(uint256)",
          "withdrawSfrax(uint256)",
          "depositWstEth(uint256)",
          "depositREth(uint256)",
          "withdrawREth()",
          "withdrawWstEth(uint256)",
          "addAfEthCrvLiquidity(address,uint256,uint256)",
          "withdrawCRVPool(address,uint256)",
          "getCvxPriceData()",
          "getCrvPriceData()",
          "setVault(address,address)",
          "setPauseStaking(bool)",
          "setPauseuntaking(bool)",
          "getName()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AsymmetryStrategy",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "currentBundleNftId",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:99"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numberOfDerivatives",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:100"
          },
          {
            "kind": "state-variable-assignment",
            "name": "afBalancerPool",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "balPoolId",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:105"
          },
          {
            "kind": "state-variable-assignment",
            "name": "balancerHelpers",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:107"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pauseStaking",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:111"
          },
          {
            "kind": "state-variable-assignment",
            "name": "pauseUnstaking",
            "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:112"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "emissionsPerYear",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:57"
            },
            {
              "label": "vaults",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:60"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Position)4893_storage)",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:63"
            },
            {
              "label": "currentPositionId",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:64"
            },
            {
              "label": "rocketStorage",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(RocketStorageInterface)9891",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:88"
            },
            {
              "label": "afETH",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:93"
            },
            {
              "label": "CVXNFT",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:94"
            },
            {
              "label": "bundleNFT",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:95"
            },
            {
              "label": "currentCvxNftId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:97"
            },
            {
              "label": "currentBundleNftId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:99"
            },
            {
              "label": "numberOfDerivatives",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:100"
            },
            {
              "label": "crvPool",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:101"
            },
            {
              "label": "afBalancerPool",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:104"
            },
            {
              "label": "balPoolId",
              "offset": 0,
              "slot": "14",
              "type": "t_bytes32",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:105"
            },
            {
              "label": "balancerHelpers",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:107"
            },
            {
              "label": "pauseStaking",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:111"
            },
            {
              "label": "pauseUnstaking",
              "offset": 21,
              "slot": "15",
              "type": "t_bool",
              "contract": "AsymmetryStrategy",
              "src": "contracts/AsymmetryStrategy/AsymmetryStrategy.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(RocketStorageInterface)9891": {
              "label": "contract RocketStorageInterface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Position)4893_storage)": {
              "label": "mapping(address => struct AsymmetryStrategy.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4893_storage": {
              "label": "struct AsymmetryStrategy.Position",
              "members": [
                {
                  "label": "positionID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rocketBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lidoBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "curveBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "convexBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "balancerBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "cvxNFTID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "bundleNFTID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "afETH",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "createdAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "sfraxBalances",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AsymmetryStrategy/interfaces/IAf1155.sol:IAfBundle1155": {
        "src": "contracts/AsymmetryStrategy/interfaces/IAf1155.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256,uint256,uint256,uint256,address)",
          "burnBatch(address,uint256[2],uint256[2])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AsymmetryStrategy/interfaces/IAf1155.sol:IAfCVX1155": {
        "src": "contracts/AsymmetryStrategy/interfaces/IAf1155.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(uint256,uint256,address)",
          "burn(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AsymmetryStrategy/interfaces/convex/ICvxLockerV2.sol:ICvxLockerV2": {
        "src": "contracts/AsymmetryStrategy/interfaces/convex/ICvxLockerV2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lock(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/AsymmetryStrategy/interfaces/convex/ILockedCvx.sol:ILockedCvx": {
        "src": "contracts/AsymmetryStrategy/interfaces/convex/ILockedCvx.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lock(address,uint256,uint256)",
          "processExpiredLocks(bool)",
          "getReward(address,bool)",
          "balanceAtEpochOf(uint256,address)",
          "totalSupplyAtEpoch(uint256)",
          "epochCount()",
          "epochs(uint256)",
          "checkpointEpoch()",
          "balanceOf(address)",
          "lockedBalanceOf(address)",
          "pendingLockOf(address)",
          "pendingLockAtEpochOf(uint256,address)",
          "totalSupply()",
          "lockedBalances(address)",
          "addReward(address,address,bool)",
          "approveRewardDistributor(address,address,bool)",
          "setStakeLimits(uint256,uint256)",
          "setBoost(uint256,uint256,address)",
          "setKickIncentive(uint256,uint256)",
          "shutdown()",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/SafEth.sol:SafEth": {
        "src": "contracts/SafEth/SafEth.sol:15",
        "version": {
          "withMetadata": "ec963f57dad961fc80ec045219ceb9676e65778716af02ce6f19ea79a33237dc",
          "withoutMetadata": "54091a35b787d5ffcdcae93bb659b2148dd81b1607df9d7b30e0be4f9bf5c75f",
          "linkedWithoutMetadata": "54091a35b787d5ffcdcae93bb659b2148dd81b1607df9d7b30e0be4f9bf5c75f"
        },
        "inherit": [
          "contracts/SafEth/SafEthStorage.sol:SafEthStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(string,string)",
          "stake()",
          "unstake(uint256)",
          "rebalanceToWeights()",
          "adjustWeight(uint256,uint256)",
          "addDerivative(address,uint256)",
          "setMaxSlippage(uint256,uint256)",
          "setMinAmount(uint256)",
          "setMaxAmount(uint256)",
          "setPauseStaking(bool)",
          "setPauseUnstaking(bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "152",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)9398)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)9398": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)9398)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/SafEthStorage.sol:SafEthStorage": {
        "src": "contracts/SafEth/SafEthStorage.sol:15",
        "version": {
          "withMetadata": "1519faea92a6d50a70714d037403ba4b1cfa7547573a5fe73e1cfa0c612f842d",
          "withoutMetadata": "aa2d7a64b9204a0b0a51d1554c30d920529bd3c82208d624631aa85d0805a237",
          "linkedWithoutMetadata": "aa2d7a64b9204a0b0a51d1554c30d920529bd3c82208d624631aa85d0805a237"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)9398)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)9398": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)9398)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/Ankr.sol:Ankr": {
        "src": "contracts/SafEth/derivatives/Ankr.sol:14",
        "version": {
          "withMetadata": "08b88caa4ea7aafc704502e9963ff2554887b42dedf5e2c1394002aa2be772b1",
          "withoutMetadata": "28e35382865a698f73f5389a3121e295760c7c776bf8d11a6a52eb4e7548c82c",
          "linkedWithoutMetadata": "28e35382865a698f73f5389a3121e295760c7c776bf8d11a6a52eb4e7548c82c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "Ankr",
              "src": "contracts/SafEth/derivatives/Ankr.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/Reth.sol:Reth": {
        "src": "contracts/SafEth/derivatives/Reth.sol:19",
        "version": {
          "withMetadata": "9fab79d863fc662795ff520e19dcc06aaddce1183d9a3839626fedaa728bb12d",
          "withoutMetadata": "166d7675286fe8d4a8409afcbdbe16744dadf1b6ba7ee70d3bbd16a3b3a6ec56",
          "linkedWithoutMetadata": "166d7675286fe8d4a8409afcbdbe16744dadf1b6ba7ee70d3bbd16a3b3a6ec56"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "Reth",
              "src": "contracts/SafEth/derivatives/Reth.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/SfrxEth.sol:SfrxEth": {
        "src": "contracts/SafEth/derivatives/SfrxEth.sol:13",
        "version": {
          "withMetadata": "aecbafa5ae9bd89466324050316812776a57c34df5fe67a05e0f9d1c5d56b2f2",
          "withoutMetadata": "1e7b62dced3e34139574c43eed15e2b7e90964d754460babfd7030be88c7cbfe",
          "linkedWithoutMetadata": "1e7b62dced3e34139574c43eed15e2b7e90964d754460babfd7030be88c7cbfe"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "SfrxEth",
              "src": "contracts/SafEth/derivatives/SfrxEth.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/StakeWise.sol:StakeWise": {
        "src": "contracts/SafEth/derivatives/StakeWise.sol:17",
        "version": {
          "withMetadata": "38abf409a134892889e6b32a3e237bd36cfcd531771d79feda8156d8c06febb5",
          "withoutMetadata": "cb4df89e02fc094ded7bc46de2df4ae525a43601b361cffe247155b931c1b5bd",
          "linkedWithoutMetadata": "cb4df89e02fc094ded7bc46de2df4ae525a43601b361cffe247155b931c1b5bd"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "StakeWise",
              "src": "contracts/SafEth/derivatives/StakeWise.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/SafEth/derivatives/WstEth.sol:WstEth": {
        "src": "contracts/SafEth/derivatives/WstEth.sol:12",
        "version": {
          "withMetadata": "b95f477534f591ef886b88bfdebdc1ab4fe583475f4bf339f08aa62a96a49d3d",
          "withoutMetadata": "1216d9619a3778667a5f217208399bdd2d59405c1be23d838ac752ff7a3981b3",
          "linkedWithoutMetadata": "1216d9619a3778667a5f217208399bdd2d59405c1be23d838ac752ff7a3981b3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "name()",
          "setMaxSlippage(uint256)",
          "withdraw(uint256)",
          "deposit()",
          "ethPerDerivative(uint256)",
          "balance()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "WstEth",
              "src": "contracts/SafEth/derivatives/WstEth.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/IDerivative.sol:IDerivative": {
        "src": "contracts/interfaces/IDerivative.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "deposit()",
          "withdraw(uint256)",
          "ethPerDerivative(uint256)",
          "balance()",
          "setMaxSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/ankr/AnkrEth.sol:AnkrEth": {
        "src": "contracts/interfaces/ankr/AnkrEth.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "bondsToShares(uint256)",
          "sharesToBonds(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/ankr/AnkrStaker.sol:AnkrStaker": {
        "src": "contracts/interfaces/ankr/AnkrStaker.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stakeAndClaimAethC()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICrvEthPool1.sol:ICrvEthPool1": {
        "src": "contracts/interfaces/curve/ICrvEthPool1.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add_liquidity(uint256[2],uint256,bool)",
          "remove_liquidity(uint256,uint256[2])",
          "exchange(int128,int128,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)",
          "get_dy(uint256,uint256,uint256)",
          "coins(uint256)",
          "price_oracle()",
          "get_virtual_price()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/curve/ICrvEthPool2.sol:ICrvEthPool2": {
        "src": "contracts/interfaces/curve/ICrvEthPool2.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchange(uint256,uint256,uint256,uint256)",
          "exchange_underlying(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/frax/IFrxETHMinter.sol:IFrxETHMinter": {
        "src": "contracts/interfaces/frax/IFrxETHMinter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "submitAndDeposit(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/frax/IsFrxEth.sol:IsFrxEth": {
        "src": "contracts/interfaces/frax/IsFrxEth.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "redeem(uint256,address,address)",
          "approve(address,uint256)",
          "convertToAssets(uint256)",
          "convertToShares(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/lido/IWStETH.sol:IWStETH": {
        "src": "contracts/interfaces/lido/IWStETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unwrap(uint256)",
          "getWstETHByStETH(uint256)",
          "getStETHByWstETH(uint256)",
          "stEthPerToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/lido/IstETH.sol:IStETH": {
        "src": "contracts/interfaces/lido/IstETH.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getTotalShares()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketDAOProtocolSettingsDepositInterface.sol:RocketDAOProtocolSettingsDepositInterface": {
        "src": "contracts/interfaces/rocketpool/RocketDAOProtocolSettingsDepositInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDepositEnabled()",
          "getAssignDepositsEnabled()",
          "getMinimumDeposit()",
          "getMaximumDepositPoolSize()",
          "getMaximumDepositAssignments()",
          "getDepositFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketDepositPoolInterface.sol:RocketDepositPoolInterface": {
        "src": "contracts/interfaces/rocketpool/RocketDepositPoolInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBalance()",
          "getExcessBalance()",
          "deposit()",
          "recycleDissolvedDeposit()",
          "recycleExcessCollateral()",
          "recycleLiquidatedStake()",
          "assignDeposits()",
          "withdrawExcessBalance(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketStorageInterface.sol:RocketStorageInterface": {
        "src": "contracts/interfaces/rocketpool/RocketStorageInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDeployedStatus()",
          "getGuardian()",
          "setGuardian(address)",
          "confirmGuardian()",
          "getAddress(bytes32)",
          "getUint(bytes32)",
          "getString(bytes32)",
          "getBytes(bytes32)",
          "getBool(bytes32)",
          "getInt(bytes32)",
          "getBytes32(bytes32)",
          "setAddress(bytes32,address)",
          "setUint(bytes32,uint256)",
          "setString(bytes32,string)",
          "setBytes(bytes32,bytes)",
          "setBool(bytes32,bool)",
          "setInt(bytes32,int256)",
          "setBytes32(bytes32,bytes32)",
          "deleteAddress(bytes32)",
          "deleteUint(bytes32)",
          "deleteString(bytes32)",
          "deleteBytes(bytes32)",
          "deleteBool(bytes32)",
          "deleteInt(bytes32)",
          "deleteBytes32(bytes32)",
          "addUint(bytes32,uint256)",
          "subUint(bytes32,uint256)",
          "getNodeWithdrawalAddress(address)",
          "getNodePendingWithdrawalAddress(address)",
          "setWithdrawalAddress(address,address,bool)",
          "confirmWithdrawalAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/rocketpool/RocketTokenRETHInterface.sol:RocketTokenRETHInterface": {
        "src": "contracts/interfaces/rocketpool/RocketTokenRETHInterface.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "getEthValue(uint256)",
          "getRethValue(uint256)",
          "getExchangeRate()",
          "getTotalCollateral()",
          "getCollateralRate()",
          "depositExcess()",
          "depositExcessCollateral()",
          "mint(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/stakewise/IStakewiseStaker.sol:IStakewiseStaker": {
        "src": "contracts/interfaces/stakewise/IStakewiseStaker.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "stake()",
          "minActivatingDeposit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/ISwapRouter.sol:ISwapRouter": {
        "src": "contracts/interfaces/uniswap/ISwapRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/uniswap/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/uniswap/IUniswapV3Pool.sol:15",
        "inherit": [
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "contracts/interfaces/uniswap/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/interfaces/uniswap/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "contracts/interfaces/uniswap/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/DerivativeMock.sol:DerivativeMock": {
        "src": "contracts/mocks/DerivativeMock.sol:14",
        "version": {
          "withMetadata": "8aeb55a1619cd674e285dd4c4f539c2f4a6f830d41d3180a442bec67f08f9ca3",
          "withoutMetadata": "ce616d6b13eede9ac1513c7b43e38fec17d5a0a57a54b40692a8f4268ad60de7",
          "linkedWithoutMetadata": "ce616d6b13eede9ac1513c7b43e38fec17d5a0a57a54b40692a8f4268ad60de7"
        },
        "inherit": [
          "contracts/SafEth/derivatives/SfrxEth.sol:SfrxEth",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IDerivative.sol:IDerivative"
        ],
        "libraries": [],
        "methods": [
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxSlippage",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "SfrxEth",
              "src": "contracts/SafEth/derivatives/SfrxEth.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/IDerivativeMock.sol:IDerivativeMock": {
        "src": "contracts/mocks/IDerivativeMock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "ethPerDerivative(uint256)",
          "balance()",
          "withdrawAll()",
          "setMaxSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/SafEthV2Mock.sol:SafEthV2Mock": {
        "src": "contracts/mocks/SafEthV2Mock.sol:7",
        "version": {
          "withMetadata": "0e8e7dcfbfd4869964dc336dd9ded94bf9b9027ec290b858814aea9dde9de87e",
          "withoutMetadata": "abd16f61a4f1de11ed041c5487bc53586ee278b105e661f942c1bfb53948d61f",
          "linkedWithoutMetadata": "abd16f61a4f1de11ed041c5487bc53586ee278b105e661f942c1bfb53948d61f"
        },
        "inherit": [
          "contracts/mocks/SafEthV2MockStorage.sol:SafEthV2MockStorage",
          "contracts/SafEth/SafEth.sol:SafEth",
          "contracts/SafEth/SafEthStorage.sol:SafEthStorage",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "newFunction()",
          "adminWithdrawDerivative(uint256,uint256)",
          "adminWithdrawErc20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "pauseStaking",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:16"
            },
            {
              "label": "pauseUnstaking",
              "offset": 1,
              "slot": "151",
              "type": "t_bool",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:17"
            },
            {
              "label": "derivativeCount",
              "offset": 0,
              "slot": "152",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:18"
            },
            {
              "label": "totalWeight",
              "offset": 0,
              "slot": "153",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:19"
            },
            {
              "label": "minAmount",
              "offset": 0,
              "slot": "154",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:20"
            },
            {
              "label": "maxAmount",
              "offset": 0,
              "slot": "155",
              "type": "t_uint256",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:21"
            },
            {
              "label": "derivatives",
              "offset": 0,
              "slot": "156",
              "type": "t_mapping(t_uint256,t_contract(IDerivative)9398)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:22"
            },
            {
              "label": "weights",
              "offset": 0,
              "slot": "157",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "SafEthStorage",
              "src": "contracts/SafEth/SafEthStorage.sol:23"
            },
            {
              "label": "newFunctionCalled",
              "offset": 0,
              "slot": "158",
              "type": "t_bool",
              "contract": "SafEthV2MockStorage",
              "src": "contracts/mocks/SafEthV2MockStorage.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IDerivative)9398": {
              "label": "contract IDerivative",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_contract(IDerivative)9398)": {
              "label": "mapping(uint256 => contract IDerivative)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "contracts/mocks/SafEthV2MockStorage.sol:SafEthV2MockStorage": {
        "src": "contracts/mocks/SafEthV2MockStorage.sol:6",
        "version": {
          "withMetadata": "57a5dbab4ef7c025cac257509f8ee3bf3e025432c28acee111865f901112f28e",
          "withoutMetadata": "30592c3de0185e6c148b55812afb875d12f99e63e8efbd71f8f55cf9bccdf6e7",
          "linkedWithoutMetadata": "30592c3de0185e6c148b55812afb875d12f99e63e8efbd71f8f55cf9bccdf6e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "newFunctionCalled",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "SafEthV2MockStorage",
              "src": "contracts/mocks/SafEthV2MockStorage.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.13"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7269402b091fb04ad15f40eb57f6a076aa5638947bfd351920c7d2dc44eb79af",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.13"
      }
    }
  ]
}